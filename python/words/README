"Words" is a simple application to demonstrate dataflow in the Hybrid system.

words.py simulates a data source by reading in the system dictionary file, and
then randomly emitting words from it at random intervals of at most one second.
Run this script and you will have a "live" data source.  As the words are
emitted, they are also placed into a database for use by other processors and
filters.

Vowels are important.  vowels.py implements a processing filter, named "vowels",
that watches for records in the database that have a "word" property (which is
generated by words.py)  It then computes the number of vowels in the word, and
the fraction of the total letters that are vowels, depositing these values into
new database record properties ("count" and "fraction" respectively) - these
will be stored in a subdocument of the database record with key "vowels".

Next we might want to know what these words are worth on various game shows.
scrabble.py, depending on the existence of the "word" field, computes and
deposits the Scrabble value of each word in the database, while wheel.py,
depending on the existence of the "vowels:count" field, computes how much this
word would cost to "buy" on Wheel of Fortune.  These two scripts represent
various derived measures one might wish to compute on the original data (or on
derived measures thereof).  The declarations of input and output tags of each
filter give rise to a data dependency network, whereby each filter will wait for
appropriate computation operations to "cascade" from the original data source -
words.py.

index.html and words.js constitute a simple web app that uses D3 to visualize
the stream of words, and their vowel fraction ("monthly" is only one seventh
vowels!).  The app works by polling the database every several seconds to check
for new records with both a "word" and "vowels:fraction" property.  As new
records come in, they are plotted on the chart, with automatic scrolling to
handle the passage of time.
